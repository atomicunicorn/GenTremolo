//
//  EuclidGrid.h
//  GenTremolo
//
//  Created by Zachary Gottesman on 5/21/17.
//
//

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
//#include <math.h>
#include <vector>

/* Grid resolution should be every 32nd beat plus or minus the swing param. 
 * Further, the 0-chaos patterns generated by this should be 3 bars 
 * (96 beat values per array / 32 32nd-note beat values) = 3 bars.
 *
 * If any of the parameters here are marked with a comment containing "!!!", 
 * then that means the original drum code held these parameters as
 * a 3-element array - one element for each drum (kick, snare, hh). 
 * 
 * Lastly, the public / private designation of methods is still up for 
 * debate and not necessarily permanent. */

class EuclidGrid {
public:
    EuclidGrid();
    ~EuclidGrid();
    
    const int numParts = 3;
    const int stepsPerPattern = 32;
    const int numNodeElements = 96;
    const uint32_t maxValue = 127;
    
    /* Structs */
    struct EuclidNote {
        int lengthInSamples;
        bool noteOn;
    };
    
    struct StereoEuclidNote {
        int leftLengthInSamples;
        int rightLengthInSamples;
        bool leftNoteOn;
        bool rightNoteOn;
    };
    
    /* Methods */
    int getMapX();
    int getMapY();
    int getRandomness();
    int getDensity(int index);
    int getEuclideanLength(int index);
    bool isOffNote();
    
    void setMapX(int x);
    void setMapY(int y);
    void setRandomness(int r);
    void setDensity(int d, int index);
    void setEuclideanLength(int euclidLength, int index);
    void resetToDefault();
    
    /* Pattern generation methods */
    bool runGrid(long playHeadLocationBy32Notes, int samplesPerQuarterNote, int noteSampleLength, EuclidNote& noteStruct);
    void evaluatePattern();                  // originally referred to as evaluateDrums
    int readPatternMap(int index);                     // originally referred to as readDrumMap

    /* Beat Vectors - be careful!! https://stackoverflow.com/questions/2117313/initializing-constant-static-array-in-header-file */

    std::vector<uint32_t> node_0;

    std::vector<std::vector<uint32_t>> beat_map;
    uint32_t getLevelFromBeatMap(int i, int j, int offset);
    std::vector<uint32_t> getNodeFromBeatMap(int i, int j);
    
    Random randObj;
    
private:
    bool isOffNoteBool;
    int mapX;
    int mapY;
    int randomness;
    std::vector<int> density;          // !!!
    std::vector<int> euclideanLength;  // !!!
    
    /* Double check, but there most likely should not be any external access to these int params. */
    int patternStep;      // originally referred to as step
    std::vector<int> euclideanStep;    // !!!
    std::vector<int> perterbation;     // !!!
    std::vector<int> amplitude;         // !!! - originally referred to as velocity
    unsigned int state;
    
    const int defaultMapX = 64;
    const int defaultMapY = 64;
    const int defaultRandomness = 60; //10;
    const int defaultPatternStep = 0;
    const int defaultPerterbation = 0;
    const int defaultDensity = 90; // 32;
    const int defaultEuclideanLength = 7; // !!! BD=5,SN=7,HH=11;
    const int defaultEuclideanStep = 0;
    const int defaultAmplitude = 0;
    const int defaultState = 0;
    const bool defaultIsOffNoteBool = false;
    
    /* Methods */
    uint32_t u32Mix(uint32_t first, uint32_t second, uint32_t maxVal);
    /* u32Mix from U8Mix of hw ( mutable-instruments.net/forum/discussion/3863/understanding-code-grids-u8mix-and-bitshift-in-pattern_generator-cc/p1 ) */
    
};
